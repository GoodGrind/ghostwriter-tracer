<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.ghostwriter.sample.fizzbuzz</groupId>
    <artifactId>fizzbuzz</artifactId>
    <version>1.0</version>
    <packaging>jar</packaging>

    <name>FizzBuzz sample application</name>
    <url>ghostwriter.io</url>

    <!-- In order to get started with GhostWriter, the following dependencies are required -->
    <dependencies>
        <!--
            To get started with GhostWriter, you need to reference and use the compile-time dependency that contains the preprocessor
            The preprocessor instruments the use of the GhostWriter API into your application.
         -->
        <dependency>
            <groupId>io.ghostwriter</groupId>
            <artifactId>ghostwriter-jdk-v8</artifactId>
            <version>0.3.0</version>
            <scope>compile</scope>
            <classifier>bundle</classifier>
        </dependency>

        <!--
            In order to actually capture and use the events that GhostWriter triggers a runtime implementation needs to be provided.
            The GhostWriter stub check the classpath for TracerProvider implementations. GhostWriter will use the first one it finds.
            If no implementation was found on the classpath, the default System.out will be used.
        -->
        <dependency>
            <groupId>io.ghostwriter</groupId>
            <artifactId>ghostwriter-rt-tracer</artifactId>
            <version>0.3.0</version>
            <scope>runtime</scope>
        </dependency>

        <!--
            To dump the tracing events to a logger, we put the SLF4J facade writer on the classpath.
            This ensures that SFL4J handles the tracer output instead of the default System.out implementation.
            This is an optional dependency. Tracing would work without this line as well.
        -->
        <dependency>
            <groupId>io.ghostwriter</groupId>
            <artifactId>ghostwriter-rt-tracer-slf4j</artifactId>
            <version>0.3.0</version>
            <scope>runtime</scope>
        </dependency>

        <!-- SLF4J dependencies for providing the output generated by GhostWriter tracer runtime -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.13</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>1.7.13</version>
            <scope>runtime</scope>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.3</version>
                <executions>
                    <execution>
                        <id>default-compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <!-- ensure that we use the correct Java version and GhostWriter preprocessor -->
                        <configuration>
                            <source>1.8</source>
                            <target>1.8</target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
             This is here for the sake of completion.
             This makes it possible to execute the sample application using the command:
             mvn package exec:java -Dorg.slf4j.simpleLogger.defaultLogLevel=trace
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.4.0</version>
                <configuration>
                    <mainClass>io.ghostwriter.sample.fizzbuzz.FizzBuzz</mainClass>
                </configuration>
            </plugin>

        </plugins>
    </build>
</project>
