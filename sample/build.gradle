apply plugin: "java"
apply plugin: "application"

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    // To get started with GhostWriter, you need to reference and use the compile-time dependency that contains the preprocessor
    // The preprocessor instruments the use of the GhostWriter API into your application.
    compileOnly "io.ghostwriter:ghostwriter-jdk-v8:0.3.2"

    // The standard GhostWriter API dependency that gets instrumented into your application
    compile "io.ghostwriter:ghostwriter-api-java:0.3.1"

    // In order to actually capture and use the events that GhostWriter triggers a runtime implementation needs to be provided.
    // The GhostWriter stub check the classpath for TracerProvider implementations. GhostWriter will use the first one it finds.
    // If no implementation was found on the classpath, the default System.out will be used.
    runtime "io.ghostwriter:ghostwriter-rt-tracer:0.3.1"

    // To dump the tracing events to a logger, we put the SLF4J facade writer on the classpath.
    // This ensures that SFL4J handles the tracer output instead of the default System.out implementation.
    // This is an optional dependency. Tracing would work without this line as well.
    runtime "io.ghostwriter:ghostwriter-rt-tracer-slf4j:0.3.1"

    // SLF4J dependencies for providing the output generated by GhostWriter tracer runtime
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.13'
    runtime "org.slf4j:slf4j-simple:1.7.13"
}

jar {
    manifest {
        attributes 'Main-Class': "io.ghostwriter.sample.fizzbuzz.FizzBuzz"
    }
}

// The ghostwriter-rt-tracer-slfj4 module uses trace level by default.
// This means that if we want to see the output setting the log level to 'trace' needs to be done.
applicationDefaultJvmArgs = ["-Dorg.slf4j.simpleLogger.defaultLogLevel=trace"]
mainClassName = "io.ghostwriter.sample.fizzbuzz.FizzBuzz"
